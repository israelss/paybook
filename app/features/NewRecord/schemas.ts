import { extractFromCurrency } from '~/utils'
import { z } from 'zod'

export const newRecordSchema = z.object({
  userId: z.string(),
  dueDate: z
    .date({
      required_error: 'A data deve ser selecionada... ‚ö†Ô∏è',
      invalid_type_error: 'A data deve ser uma data v√°lida... ‚ùå'
    }),
  installments: z
    .number({
      required_error: 'O n√∫mero de parcelas deve ser definido... ‚ö†Ô∏è',
      invalid_type_error: 'O n√∫mero de parcelas deve ser um n√∫mero... ‚ùå'
    })
    .min(1, {
      message: 'O n√∫mero de parcelas deve ser pelo menos 1 üëÄ'
    })
    .default(1),
  clientName: z
    .string({
      required_error: 'O nome do cliente deve ser preenchido... ‚ö†Ô∏è',
      invalid_type_error: 'O nome do cliente deve ser uma string v√°lida ‚ùå'
    })
    .min(1, {
      message: 'O nome do cliente deve ter pelo menos 1 letra üëÄ'
    }),
  value: z
    .string({
      required_error: 'O valor deve ser preenchido... ‚ö†Ô∏è'
    })
    .superRefine((val, ctx) => {
      if (isNaN(extractFromCurrency(val))) {
        ctx.addIssue({
          code: z.ZodIssueCode.invalid_type,
          message: 'O valor deve ser um n√∫mero... ‚ùå',
          expected: 'number',
          received: 'nan'
        })
      }

      if (extractFromCurrency(val) < 1) {
        ctx.addIssue({
          code: z.ZodIssueCode.too_small,
          message: 'O valor n√£o pode ser menor que 0,01 üëÄ',
          inclusive: true,
          minimum: 1,
          type: 'number'
        })
      }

      if (extractFromCurrency(val) > 99999999) {
        ctx.addIssue({
          code: z.ZodIssueCode.too_big,
          message: 'O valor n√£o pode ser maior que 999.999,99 üëÄ',
          inclusive: true,
          maximum: 99999999,
          type: 'number'
        })
      }
    })
})
